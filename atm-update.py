# ATM System with MySQL Database Integration
# Features: User Authentication, Balance Inquiry, Deposit, Withdrawal, Password Change, Transaction Logging
# MySQL ‡¥≤‡µÜ ‡¥∞‡¥£‡µç‡¥ü‡µç ‡¥ü‡µá‡¥¨‡¥ø‡¥≥‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥á‡¥§‡¥ø‡µΩ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥ì‡¥∞‡µã ‡¥ü‡µç‡¥∞‡¥æ‡µª‡¥∏‡¥æ‡¥ï‡µç‡¥∑‡µª‡¥∏‡µÅ‡¥Ç ‡¥ï‡µÉ‡¥§‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥ü‡µç‡¥∞‡¥æ‡µª‡¥∏‡¥æ‡¥ï‡µç‡¥∑‡µª ‡¥é‡¥®‡µç‡¥® 
# ‡¥ü‡µá‡¥¨‡¥ø‡¥≥‡¥ø‡µΩ ‡¥∞‡µá‡¥ñ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥ø ‡¥µ‡µÜ‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ‡¥£‡µç‡¥ü‡µç.
import mysql.connector

class ATM:
    def __init__(self, host, user, password, database):
        self.db_host = host
        self.db_user = user
        self.db_password = password
        self.db_database = database
        self.connection = None
        self.cursor = None
        self.logged_in_user = None

    def connect_db(self):
        """Establishes a connection to the database."""
        try:
            self.connection = mysql.connector.connect(
                host=self.db_host,
                user=self.db_user,
                password=self.db_password,
                database=self.db_database
            )
            self.cursor = self.connection.cursor(dictionary=True)
            return True
        except mysql.connector.Error as err:
            print(f"Database connection failed: {err}")
            return False

    def close_db(self):
        """Closes the database connection."""
        if self.connection:
            self.cursor.close()
            self.connection.close()
            
    def _log_transaction(self, transaction_type, amount=None):
        """Logs a transaction into the transactions table."""
        if not self.logged_in_user:
            return
        
        sql = "INSERT INTO transactions (user_id, transaction_type, amount) VALUES (%s, %s, %s)"
        values = (self.logged_in_user['user_id'], transaction_type, amount)
        
        try:
            self.cursor.execute(sql, values)
            self.connection.commit()
        except mysql.connector.Error as err:
            print(f"Error logging transaction: {err}")

    def login(self):
        """Handles user login."""
        print("\n--- Login ---")
        username = input("Enter username: ")
        password = input("Enter password: ")

        self.cursor.execute("SELECT * FROM users WHERE username = %s AND password = %s", (username, password))
        user_data = self.cursor.fetchone()

        if user_data:
            self.logged_in_user = user_data
            print(f"\n‚úÖ Login successful! Welcome, {self.logged_in_user['username']}!")
            return True
        else:
            print("‚ùå Invalid username or password.")
            return False

    def check_balance(self):
        """Displays the current account balance."""
        if not self.logged_in_user:
            print("‚ùå Please log in first.")
            return

        self.cursor.execute("SELECT balance FROM users WHERE user_id = %s", (self.logged_in_user['user_id'],))
        current_balance = self.cursor.fetchone()['balance']
        print(f"\nYour current balance is: ‚Çπ{current_balance:.2f}")

    def deposit(self):
        """Handles depositing money into the account."""
        if not self.logged_in_user:
            print("‚ùå Please log in first.")
            return

        try:
            amount = float(input("Enter amount to deposit: "))
            if amount <= 0:
                print("‚ùå The amount must be greater than zero.")
                return

            self.cursor.execute("UPDATE users SET balance = balance + %s WHERE user_id = %s", (amount, self.logged_in_user['user_id']))
            self.connection.commit()
            print(f"‚úÖ ‚Çπ{amount:.2f} has been deposited to your account.")
            self._log_transaction('deposit', amount)
            self.check_balance()

        except ValueError:
            print("‚ùå Invalid amount. Please enter a number.")
            
    def withdraw(self):
        """Handles withdrawing money from the account."""
        if not self.logged_in_user:
            print("‚ùå Please log in first.")
            return

        try:
            amount = float(input("Enter amount to withdraw: "))
            if amount <= 0:
                print("‚ùå The amount must be greater than zero.")
                return

            self.cursor.execute("SELECT balance FROM users WHERE user_id = %s", (self.logged_in_user['user_id'],))
            current_balance = self.cursor.fetchone()['balance']

            if amount > current_balance:
                print("‚ùå Insufficient balance.")
            else:
                self.cursor.execute("UPDATE users SET balance = balance - %s WHERE user_id = %s", (amount, self.logged_in_user['user_id']))
                self.connection.commit()
                print(f"‚úÖ ‚Çπ{amount:.2f} has been withdrawn.")
                self._log_transaction('withdraw', amount)
                self.check_balance()
        except ValueError:
            print("‚ùå Invalid amount. Please enter a number.")

    def change_password(self):
        """Allows the user to change their password."""
        if not self.logged_in_user:
            print("‚ùå Please log in first.")
            return

        current_password = input("Enter your current password: ")
        if current_password != self.logged_in_user['password']:
            print("‚ùå Incorrect current password.")
            return

        new_password = input("Enter a new password: ")
        confirm_password = input("Confirm the new password: ")
        
        if new_password != confirm_password:
            print("‚ùå New passwords do not match.")
            return

        self.cursor.execute("UPDATE users SET password = %s WHERE user_id = %s", (new_password, self.logged_in_user['user_id']))
        self.connection.commit()
        self.logged_in_user['password'] = new_password
        print("‚úÖ Password changed successfully.")
        self._log_transaction('password_change')

    def logout(self):
        """Logs the user out."""
        print(f"\nGoodbye, {self.logged_in_user['username']}! üëã")
        self.logged_in_user = None

    def display_menu(self):
        """Displays the main ATM menu."""
        print("\n--- ATM Menu ---")
        print("1. Check Balance")
        print("2. Deposit Money")
        print("3. Withdraw Money")
        print("4. Change Password")
        print("0. Logout")

    def run(self):
        """Main program loop to handle user interaction."""
        if not self.connect_db():
            return

        while True:
            if not self.logged_in_user:
                if self.login():
                    self.main_loop()
            else:
                # This part is unreachable as main_loop() handles the logic.
                pass
            
            choice = input("\nPress '1' to log in again, or '0' to exit: ")
            if choice == '0':
                break
        
        self.close_db()
        print("Program terminated.")

    def main_loop(self):
        """The main loop after a successful login."""
        while self.logged_in_user:
            self.display_menu()
            choice = input("Enter your choice: ")

            try:
                if choice == '1':
                    self.check_balance()
                elif choice == '2':
                    self.deposit()
                elif choice == '3':
                    self.withdraw()
                elif choice == '4':
                    self.change_password()
                elif choice == '0':
                    self.logout()
                    break
                else:
                    print("‚ùå Invalid choice. Please select a number from the menu.")
            except Exception as e:
                print(f"‚ùå An error occurred: {e}")

if __name__ == "__main__":
    # Update these with your MySQL database credentials
    atm = ATM("localhost", "root", "", "atm_db")
    atm.run()
    
    # What it if __name__ == "__main__":? does?
    # This line checks if the script is being run directly (not imported as a module).
    # If it is run directly, it creates an instance of the ATM class and calls the run() method to start the program.
    # __name__ == "__main__":  ‡¥é‡¥®‡µç‡¥®‡¥§‡µç ‡¥™‡µà‡¥§‡µç‡¥§‡µ∫ ‡¥∏‡µç‡¥ï‡µç‡¥∞‡¥ø‡¥™‡µç‡¥±‡µç‡¥±‡µç ‡¥®‡µá‡¥∞‡¥ø‡¥ü‡µç‡¥ü‡µç ‡¥±‡µ∫ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Æ‡µá ‡¥Ü ‡¥≠‡¥æ‡¥ó‡¥Ç ‡¥é‡¥ï‡µç‡¥∏‡¥ø‡¥ï‡µç‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÇ.
    # ‡¥á‡¥§‡µç ‡¥∏‡µç‡¥ï‡µç‡¥∞‡¥ø‡¥™‡µç‡¥±‡µç‡¥±‡µç ‡¥Æ‡¥±‡µç‡¥±‡µä‡¥∞‡µÅ ‡¥Æ‡µã‡¥°‡µç‡¥Ø‡µÇ‡¥≥‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç ‡¥á‡¥Ç‡¥™‡µã‡µº‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥Ü ‡¥≠‡¥æ‡¥ó‡¥Ç ‡¥é‡¥ï‡µç‡¥∏‡¥ø‡¥ï‡µç‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥™‡µç‡¥™‡µÜ‡¥ü‡¥æ‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
# What is the use of if __name__ == "__main__": in Python?
# In Python, if __name__ == "__main__": is used to check whether a script is being run directly or being imported as a module in another script.
# When a Python script is run directly, the special variable __name__ is set to "__main__".
# If the script is imported as a module, __name__ is set to the module's name.
# By using if __name__ == "__main__":, you can ensure that certain code
# only runs when the script is executed directly, and not when it is imported.
# This is useful for testing or running code that should not execute when the module is imported elsewhere.
# Example:
# def main():
#     print("This script is being run directly.")   
# if __name__ == "__main__":
#     main()
# In this example, the main() function will only be called if the script is run directly.

    
    # What is the use of self in Python?
    # In Python, self is a reference to the current instance of the class.  It is used to access variables and methods associated with the instance.
    # It must be the first parameter of any function in the class.
    # It allows you to differentiate between instance variables and local variables within methods.
    # It is a convention to name it self, but you can use any name you like.
    
    # What is the use of __init__ method in Python?
    # The __init__ method in Python is a special method that is called when an instance of a class is created.
    # It is used to initialize the attributes of the class. 
    
    # How many methods are there in the ATM class?
    # There are 16 methods in the ATM class: 
    # __init__, connect_db, close_db, _log_transaction, login, check_balance, 
    # deposit, withdraw, change_password, logout, display_menu, run, main_loop
    # The __init__ method is the constructor that initializes the ATM object with database connection parameters.
    # The connect_db method establishes a connection to the MySQL database.
    # The close_db method closes the database connection.
    # The _log_transaction method logs each transaction into the transactions table.
    # The login method handles user authentication.
    # The check_balance method displays the current account balance.
    # The deposit method allows users to deposit money into their account.
    # The withdraw method allows users to withdraw money from their account.
    # The change_password method allows users to change their account password.
    # The logout method logs the user out of the system.
    # The display_menu method shows the main ATM menu options.
    # The run method is the main program loop that handles user interaction.
    # The main_loop method handles the logic after a successful login.
    # Each method has a specific purpose and contributes to the overall functionality of the ATM system.
    # The __init__ method initializes the ATM object with database connection parameters.
    # The connect_db method establishes a connection to the MySQL database.
    # The close_db method closes the database connection.
    # The _log_transaction method logs each transaction into the transactions table.
    # The login method handles user authentication.
    # The check_balance method displays the current account balance.
    # The deposit method allows users to deposit money into their account.
    # The withdraw method allows users to withdraw money from their account.
    # The change_password method allows users to change their account password.
    # The logout method logs the user out of the system.
    # The display_menu method shows the main ATM menu options.
    # The run method is the main program loop that handles user interaction.
    # The main_loop method handles the logic after a successful login.
    # Each method has a specific purpose and contributes to the overall functionality of the ATM system.

# .cursor(dictionary=True) ‡¥é‡¥®‡µç‡¥®‡µç ‡¥é‡¥®‡µç‡¥§‡¥ø‡¥®‡¥æ‡¥£‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç?
# .cursor(dictionary=True) ‡¥é‡¥®‡µç‡¥®‡¥§‡µç MySQL Connector/Python ‡µΩ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥í‡¥∞‡µÅ ‡¥ì‡¥™‡µç‡¥∑‡¥®‡¥æ‡¥£‡µç.
# ‡¥á‡¥§‡µç ‡¥ï‡µç‡¥µ‡¥±‡¥ø ‡¥´‡¥≤‡¥ô‡µç‡¥ô‡µæ ‡¥°‡¥ø‡¥ï‡µç‡¥∑‡¥£‡¥±‡¥ø ‡¥∞‡µÇ‡¥™‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
# ‡¥∏‡¥æ‡¥ß‡¥æ‡¥∞‡¥£‡¥Ø‡¥æ‡¥Ø‡¥ø, ‡¥ï‡µç‡¥µ‡¥±‡¥ø ‡¥´‡¥≤‡¥ô‡µç‡¥ô‡µæ ‡¥ü‡µç‡¥Ø‡µÇ‡¥™‡µç‡¥™‡¥ø‡¥≥‡µÅ‡¥ï‡¥≥‡¥æ‡¥Ø‡¥ø ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç,
# ‡¥é‡¥®‡µç‡¥®‡¥æ‡µΩ dictionary=True ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡¥æ‡µΩ, ‡¥´‡¥≤‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥æ‡¥≥‡¥Ç ‡¥™‡µá‡¥∞‡µÅ‡¥ï‡µæ ‡¥ï‡µÄ ‡¥Ü‡¥Ø‡¥ø ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥°‡¥ø‡¥ï‡µç‡¥∑‡¥£‡¥±‡¥ø‡¥Ø‡¥æ‡¥Ø‡¥ø ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç.
# ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç, ‡¥í‡¥∞‡µÅ ‡¥ï‡µç‡¥µ‡¥±‡¥ø ‡¥´‡¥≤‡¥Ç (1, 'rajesh', 1000) ‡¥é‡¥®‡µç‡¥® ‡¥ü‡µç‡¥Ø‡µÇ‡¥™‡µç‡¥™‡¥ø‡¥≥‡µç‚Äç ‡¥Ü‡¥Ø‡¥ø ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µç‡¥™‡µã‡¥≥‡µç‚Äç,
# dictionary=True ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡¥æ‡¥≤‡µç‚Äç {'user_id': 1, 'username': 'rajesh', 'balance': 1000} ‡¥é‡¥®‡µç‡¥® ‡¥°‡¥ø‡¥ï‡µç‡¥∑‡¥£‡¥±‡¥ø‡¥Ø‡¥æ‡¥Ø‡¥ø ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç.
# ‡¥á‡¥§‡µç ‡¥ï‡µã‡¥°‡µç ‡¥µ‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥é‡¥≥‡µÅ‡¥™‡µç‡¥™‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ, ‡¥ï‡¥æ‡¥∞‡¥£‡¥Ç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥ï‡¥æ‡¥≥‡¥Ç ‡¥™‡µá‡¥∞‡µÅ‡¥ï‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥Æ‡µÇ‡¥≤‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ ‡¥Ü‡¥ï‡µç‚Äå‡¥∏‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç.
# ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç, user_data['username'] ‡¥é‡¥®‡µç‡¥®‡¥§‡µç user_data[1] ‡¥é‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡µÜ‡¥ï‡µç‡¥ï‡¥æ‡µæ ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥é‡¥≥‡µÅ‡¥™‡µç‡¥™‡¥Æ‡¥æ‡¥£‡µç.

# What is the use of commit() in Python MySQL?
# In Python MySQL, the commit() method is used to save the changes made to the database.
# When you execute an INSERT, UPDATE, or DELETE statement, the changes are not immediately saved to the database.
# Instead, they are held in a transaction until you call commit().
# Calling commit() makes all changes made in the current transaction permanent.
# If you do not call commit(), the changes will be lost when the connection is closed or if a rollback is performed.
# It is important to call commit() after making changes to ensure that your data is saved correctly.

# cursor ‡¥é‡¥®‡µç‡¥® ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥é‡¥®‡µç‡¥§‡¥ø‡¥®‡¥æ‡¥£‡µç? ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥ï‡¥Æ‡µç‡¥Ø‡µÇ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ?
# cursor ‡¥é‡¥®‡µç‡¥® ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥ï‡¥Æ‡µç‡¥Ø‡µÇ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µá‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
# ‡¥á‡¥§‡µç ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡¥ø‡µΩ ‡¥ï‡µç‡¥µ‡¥±‡¥ø‡¥ï‡µæ ‡¥é‡¥ï‡µç‡¥∏‡¥ø‡¥ï‡µç‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥®‡µÅ‡¥Ç ‡¥´‡¥≤‡¥ô‡µç‡¥ô‡µæ ‡¥±‡¥ø‡¥ü‡µç‡¥ü‡µá‡µ∫ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥®‡µÅ‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
# cursor ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç, ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç SQL ‡¥ï‡µç‡¥µ‡¥±‡¥ø‡¥ï‡µæ ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡¥±‡¥æ‡¥ï‡µç‡¥ï‡¥æ‡¥®‡µÅ‡¥Ç ‡¥é‡¥ï‡µç‡¥∏‡¥ø‡¥ï‡µç‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥®‡µÅ‡¥Ç ‡¥ï‡¥¥‡¥ø‡¥Ø‡µÅ‡¥Ç.
# ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç, SELECT, INSERT, UPDATE, DELETE ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡¥ø‡¥Ø ‡¥ï‡µç‡¥µ‡¥±‡¥ø‡¥ï‡µæ cursor ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥é‡¥ï‡µç‡¥∏‡¥ø‡¥ï‡µç‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç.
# cursor.execute() ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥ï‡µç‡¥µ‡¥±‡¥ø ‡¥é‡¥ï‡µç‡¥∏‡¥ø‡¥ï‡µç‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç.
# cursor.fetchone() ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥í‡¥∞‡µÅ ‡¥±‡µÜ‡¥ï‡µç‡¥ï‡µã‡µº‡¥°‡µç ‡¥±‡¥ø‡¥ü‡µç‡¥ü‡µá‡µ∫ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç.
# cursor.fetchall() ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥±‡µÜ‡¥ï‡µç‡¥ï‡µã‡µº‡¥°‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥±‡¥ø‡¥ü‡µç‡¥ü‡µá‡µ∫ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç.
# cursor.close() ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥ï‡µº‡¥∏‡µº ‡¥ï‡µç‡¥≤‡µã‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç.
# cursor ‡¥é‡¥®‡µç‡¥®‡¥§‡µç ‡¥í‡¥∞‡µÅ ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥æ‡¥¨‡µá‡¥∏‡µç ‡¥ï‡¥£‡¥ï‡µç‡¥∑‡¥®‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç ‡¥í‡¥∞‡µÅ ‡¥ï‡µº‡¥∏‡µº ‡¥í‡¥¨‡µç‡¥ú‡¥ï‡µç‡¥±‡µç‡¥±‡µç ‡¥∏‡µÉ‡¥∑‡µç‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥Ü‡¥£‡µç.

# ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥é‡¥®‡µç‡¥®‡¥§‡µç ‡¥é‡¥®‡µç‡¥§‡¥æ‡¥£‡µç? Python ‡µΩ ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥é‡¥ô‡µç‡¥ô‡¥®‡µÜ ‡¥®‡¥ø‡µº‡¥µ‡¥ö‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç?
# ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥é‡¥®‡µç‡¥®‡¥§‡µç ‡¥í‡¥∞‡µÅ ‡¥ü‡µÜ‡¥Ç‡¥™‡µç‡¥≤‡µá‡¥±‡µç‡¥±‡µç ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥¨‡µç‡¥≤‡µÇ‡¥™‡µç‡¥∞‡¥ø‡¥®‡µç‡¥±‡µç ‡¥Ü‡¥£‡µç,
# ‡¥á‡¥§‡µç ‡¥í‡¥¨‡µç‡¥ú‡¥ï‡µç‡¥±‡µç‡¥±‡µÅ‡¥ï‡µæ ‡¥∏‡µÉ‡¥∑‡µç‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
# Python ‡µΩ ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥®‡¥ø‡µº‡¥µ‡¥ö‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª, class ‡¥ï‡µÄ‡¥µ‡µá‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥í‡¥∞‡µÅ ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥°‡¥ø‡¥´‡µà‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç.
# ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç: 
# class MyClass:
#     def __init__(self, attribute1, attribute2):   
#         self.attribute1 = attribute1
#         self.attribute2 = attribute2
#     def my_method(self):
#         return self.attribute1 + self.attribute2
# ‡¥à ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡µΩ, MyClass ‡¥é‡¥®‡µç‡¥® ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥∞‡¥£‡µç‡¥ü‡µç ‡¥Ü‡¥ü‡µç‡¥∞‡¥ø‡¥¨‡µç‡¥Ø‡µÇ‡¥ü‡µç‡¥ü‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥í‡¥∞‡µÅ ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µÅ‡¥Ç ‡¥â‡µæ‡¥ï‡µç‡¥ï‡µä‡¥≥‡µç‡¥≥‡µÅ‡¥®‡µç‡¥®‡µÅ.
# __init__ ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥á‡µª‡¥∏‡µç‡¥±‡µç‡¥±‡µª‡¥∏‡µç ‡¥∏‡µÉ‡¥∑‡µç‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥ì‡¥ü‡µç‡¥ü‡µã‡¥Æ‡¥æ‡¥±‡µç‡¥±‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‡¥µ‡¥ø‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥®‡µç‡¥®‡µÅ.
# self ‡¥é‡¥®‡µç‡¥®‡¥§‡µç ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥á‡µª‡¥∏‡µç‡¥±‡µç‡¥±‡µª‡¥∏‡¥ø‡¥®‡µÜ ‡¥∏‡µÇ‡¥ö‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.
# ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥á‡µª‡¥∏‡µç‡¥±‡µç‡¥±‡µª‡¥∏‡µç ‡¥∏‡µÉ‡¥∑‡µç‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª, ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥®‡¥æ‡¥Æ‡¥Ç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥í‡¥∞‡µÅ ‡¥µ‡µá‡¥∞‡¥ø‡¥Ø‡¥¨‡¥ø‡µæ ‡¥®‡¥ø‡µº‡¥µ‡¥ö‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç.
# ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç:
# my_object = MyClass(10, 20)
# ‡¥á‡¥§‡µÅ my_object ‡¥é‡¥®‡µç‡¥® ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥á‡µª‡¥∏‡µç‡¥±‡µç‡¥±‡µª‡¥∏‡µç ‡¥∏‡µÉ‡¥∑‡µç‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç, attribute1 10 ‡¥Ü‡¥Ø‡µÅ‡¥Ç attribute2 20 ‡¥Ü‡¥Ø‡µÅ‡¥Ç ‡¥∏‡¥ú‡µç‡¥ú‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥Ç.
# ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥á‡µª‡¥∏‡µç‡¥±‡µç‡¥±‡µª‡¥∏‡µç ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µÅ‡¥ï‡µæ ‡¥Ü‡¥ï‡µç‚Äå‡¥∏‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª, ‡¥°‡µã‡¥ü‡µç‡¥ü‡µç ‡¥®‡µã‡¥ü‡µç‡¥ü‡µá‡¥∑‡µª ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Ç.
# ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç:
# result = my_object.my_method()
# ‡¥á‡¥§‡µç my_method() ‡¥Æ‡µÜ‡¥§‡µç‡¥§‡µá‡¥°‡µç ‡¥µ‡¥ø‡¥≥‡¥ø‡¥ö‡µç‡¥ö‡µç attribute1, attribute2 ‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥ï‡µÇ‡¥ü‡µç‡¥ü‡¥Ç ‡¥±‡¥ø‡¥ü‡µç‡¥ü‡µá‡µ∫ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Ç.
# ‡¥ï‡µç‡¥≤‡¥æ‡¥∏‡µç ‡¥í‡¥∞‡µÅ ‡¥í‡¥¨‡µç‡¥ú‡¥ï‡µç‡¥±‡µç‡¥±‡µç-‡¥ì‡¥±‡¥ø‡¥Ø‡¥®‡µç‡¥±‡¥°‡µç ‡¥™‡µç‡¥∞‡µã‡¥ó‡µç‡¥∞‡¥æ‡¥Æ‡¥ø‡¥Ç‡¥ó‡µç (OOP) ‡¥ï‡µã‡µ∫‡¥∏‡µÜ‡¥™‡µç‡¥±‡µç‡¥±‡¥æ‡¥£‡µç,
# ‡¥á‡¥§‡µç ‡¥ï‡µã‡¥°‡µç ‡¥±‡¥ø‡¥Ø‡µÇ‡¥∏‡¥¨‡¥ø‡¥≤‡¥ø‡¥±‡µç‡¥±‡¥ø, ‡¥Æ‡µÜ‡¥Ø‡¥ø‡¥®‡µç‡¥±‡¥®‡¥¨‡¥ø‡¥≤‡¥ø‡¥±‡µç‡¥±‡¥ø, ‡¥é‡¥ï‡µç‡¥∏‡µç‡¥±‡µç‡¥±‡µª‡¥∏‡¥ø‡¥¨‡¥ø‡¥≤‡¥ø‡¥±‡µç‡¥±‡¥ø ‡¥é‡¥®‡µç‡¥®‡¥ø‡¥µ ‡¥Æ‡µÜ‡¥ö‡µç‡¥ö‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.

# What is the use of try and except in Python?
# In Python, try and except are used for exception handling.
# The try block contains code that may potentially raise an exception.
# If an exception occurs, the code in the except block is executed.
# This allows you to handle errors gracefully without crashing the program.
# Example:
# try:
#     result = 10 / 0
# except ZeroDivisionError:
#     print("Cannot divide by zero.")
# In this example, the code inside the try block raises a ZeroDivisionError.
# The except block catches the exception and prints an error message instead of crashing the program.
# Using try and except helps in managing errors and exceptions effectively,
# ensuring that the program can continue running or fail gracefully.

